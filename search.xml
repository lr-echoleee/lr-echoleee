<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用Github+Hexo搭建博客（二）]]></title>
    <url>%2F2019%2F04%2F17%2F%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[搭建这个博客，我用到了Github、Hexo、Notepad++ 和Yu Writer Pro. 利用Notepad++查看和修改各式文本文件，利用Yu Writer Pro进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。第二部分：博客自定义参数，并将Hexo生成的静态页面部署到Github上 我的系统 windows10；所有用户名统一是Echoleee；接下来我们一步一步一步一步来 orz 安装可能需要的插件 安装前记得在正确的路径Git bash：/d/BLOG/blog 以下是可能用得到的插件： 便于部署到Github上的插件 1$ npm install hexo-deployer-git --save 安装 atom 生成插件（便于感兴趣的小伙伴订阅） 1$ npm install hexo-generator-feed --save 安装博客索引生成插件 1$ npm install hexo-generator-index --save 安装归档生成插件 1$ npm install hexo-generator-archive --save 安装标签生成插件（tags） 1$ npm install hexo-generator-tag --save 安装分类生成插件（categories） 1$ npm install hexo-generator-category --save 安装Sitemap文件生成插件（便于搜索引擎抓取网页） 1$ npm install hexo-generator-sitemap --save 安装百度Sitemap文件生成插件（普通的Sitemap格式不符合百度的要求） 1$ npm install hexo-generator-baidu-sitemap --save 安装本地搜索功能插件 1$ npm install hexo-generator-searchdb –save 渲染器 123$ npm install hexo-renderer-marked --save$ npm install hexo-renderer-stylus –save$ npm install hexo-renderer-jade --save 安装可视化博客编辑插件 1$ npm install hexo-admin –save 安装本地预览插件 1$ npm install hexo-server --save 备注：1、运行结果中出现“+插件名称@版本号”即安装成功；2、插件安装位置在/d/BLOG/blog/node_modules/;3、卸载插件举例：$ npm uninstall hexo-admin --save;4、查询插件版本号： 查看使用 npm 安装插件的版本号 修改站点配置文件修改站点配置文件_config.yml（推荐使用方法二） 方法一：打开Git Bash，运行之后直接修改参数！ 1$ vim _config.yml 方法二：下载notepad++以便打开_config.yml文件 官网：Notepad++Home 注意：修改参数时，除了“https://” 中的冒号以外，其余每个冒号后都有个空格！ 需要修改的参数，看官网和某大神的一篇文章就好，讲得清清楚楚，明明白白~ 配置 | Hexohexo教程系列——hexo配置教程 PO一下我第二次搭建博客时_config.yml的截图…*emmm如果之前没有选SSH Key，url记得应该是要改成：http://github.com/Echoleee/Echoleee.github.io.git1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Echoleeesubtitle:description: SJTU-ACEM / QZWZ keywords:author: 柳 蕊language: zh-Hanstimezone: Asia/Shanghai# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: git@github.com:lr-echoleee/lr-echoleee.gitroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace: true # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next#搜索search: path: search.xml field: post format: html limit: 10000# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:lr-echoleee/lr-echoleee.git branch: master 到现在博客初始主题和基础部分都准备好啦！ 发布一篇文章试试水1. 在_posts中新建一篇博文记得在正确的路径Git bash：/d/BLOG/blog123$ hexo new 用Github+Hexo搭建博客（一）(node:9552) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.INFO Created: D:\BLOG\blog\source\_posts\用Github-Hexo搭建博客（一）.md （如果文章标题包括空格，则需要引号括起来，否则直接写就好啦~） 2. 完成博文编辑和分类按照上面的路径用notepad++打开md文件，博文采用markdown语句，在markdown编辑器，即Yu Writer Pro (Beta)中完成，写完后保存：1234567891011121314151617---title: 用Github+Hexo搭建博客（一）date: 2019-04-17 16:17:21tags: - 博客搭建 - 技术贴categories: 博客搭建---# 用Github+Hexo搭建博客（一）搭建这个博客，我用到了Github、Hexo、Notepad++ 和Yu Writer Pro. 利用Notepad++查看和修改各式文本文件，利用Yu Writer Pro进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。**第一部分：Hexo和Github的初始搭建**&lt;!--more--&gt;我的系统 windows10；所有用户名统一是Echoleee；接下来我们一步一步一步一步来 orz 3. 清除缓存文件回到Git bash页面，生成新的静态页面前先清除缓存文件 (db.json) 和已生成的静态文件 (public)：1$ hexo clean 在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令~ 4. 生成静态页面将方才保存的“Github-Hexo搭建博客（一）.md”文件生成静态页面：1$ hexo generate 5. 开启本地预览访问端口1$ hexo server 打开本地预览访问端口：http://localhost:4000/就会出现在本地预览的Hexo初始博客，拥有一些站点基本配置和第一篇博文~ “Press Ctrl+C to stop”：可以停止本地预览；同理也可以停止正在运行的其他命令。 6. 部署至Github将本地预览的Hexo初始博客部署至Github上供每一个打开链接的网友浏览：1$ hexo deploy 结束部署完成显示：12Branch 'master' set up to track remote branch 'master' from 'git@github.com:lr-echoleee/lr-echoleee.git'.INFO Deploy done: git 然后现在打开 http://Echoleee.github.io ，显示的就是原先在本地预览的页面啦~开心！ 关于一些命令的写法tips：1234$ hexo clean$ hexo generate$ hexo server$ hexo deploy 可以分别简写成：1234$ hexo c$ hexo g$ hexo s$ hexo d 生成静态页面和部署可以合起来写作：1$ hexo d -g 可以顺带debug，如：1$ hexo s -debug 第二部分，博客自定义参数，并将Hexo生成的静态页面部署到Github上均已完成！第三部分我们来看看关于博客主题的配置和Markdown编辑器的一些Tips~]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>技术贴</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Github+Hexo搭建博客（一）]]></title>
    <url>%2F2019%2F04%2F17%2F%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[搭建这个博客，我用到了Github、Hexo、Notepad++ 和Yu Writer Pro. 利用Notepad++查看和修改各式文本文件，利用Yu Writer Pro进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。第一部分：Hexo和Github的初始搭建 我的系统 windows10；所有用户名统一是Echoleee；接下来我们一步一步一步一步来 orz 安装 Node 作用：用来生成静态页面官网下载链接：Node.js 检验安装完成：Win + R ；打开cmd；查询node版本号： 安装 Git 作用：把本地的Hexo内容提交到Github官网下载链接：Git-Downloads 检验安装完成：Win + R ；打开cmd；查询git版本号： 注册 Github账号 官网链接：GitHub 注册完记得登录邮箱确认呀！！ 配置 Github账号注册好了之后来到以下页面，选择New repository 创建代码库： Repository name 就写“代码库名字.github.io”；例如我创建了一个名为Echoleee的代码库： 代码库的名字一定要和你的Github用户名一样！！ 创建后的页面如下： 建立 gh-page 分支Github 项目的静态页面解析需要用到gh-page分支；Gh-page 建立成功后echoleee.github.io 这个网址就可以访问啦~ 选择 Settings： 下拉找到 GitHub Pages ；如果直接看到“Launch automatic page generator“就直接点，Github会直接创建出一个gh-pages的页面，等一会会，就可以访问Echoleee.github.io这个网址啦！ 然而 qwq如果是这样的：（Github页面的发布源设置为None）把 None 改成 Master 分支就好… 然然而 qwq这一步我点开None，不能改成master分支。提供两个方法，亲测方法一有效；方法二则是官网提供的解决方法。 方法一： 直接点选 Github Pages 下面的 Theme Chooser ，暂时先随意挑选一个主题，Github自带的主题并不好看，不过没四因为我们接下来会重新换主题的啦~ Select a theme，下拉点选确定（sorry忘记截图，但是这部分应该没有难度啦~），你惊喜地发现挑了主题之后，原来没有显示master分支也有了，这时候你的主页也有啦！这时候你回到gh-pages： “Your site is ready to be published at https://echoleee.github.io/.” 打开网址，获得你独立域名的初始博客。 方法二： 官网上的解决办法：GitHub Pages 但是我在运行命令时会有如下提示：按照提示输入user.name和user.email也无解orz不知道你们可不可以诶反正后来我就没有试下去了qwq 配置 SSH Key贴一段解释：加密传输的算法有好多，git使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密。这两个数字就是你在使用git和github的时候所遇到的public key也就是公钥以及private key私钥。其中，公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原。如果你的key丢失了，不管是公钥还是私钥，丢失一个都不能用了，解决方法也很简单，重新再生成一次，然后在github.com里再设置一次就行。 摘录自：10分钟教你把项目保存到github仓库保管代码 不配置 SSH Key 的话，以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要再输入账号密码啦，建议配置SSH Key~ 配置过程 在桌面（C盘）打开Git Bash 1.检测是否存在SSH Key1$ cd ~/.ssh 或者你直接手动打开文件资源管理器查看，一般路径是C:\Users\用户名，有一个文件夹名为.ssh，有的话就是原来就已经存在SSH Key啦。 2.用ssh-keygen来生成SSH Key123$ git config --global user.name"用户名"$ git config --global user.email"邮箱"$ ssh-keygen -t rsa -C"邮箱" 一路敲回车键，直至出现key’s rendomart image： 依照上面显示的路径打开.ssh文件夹： 打开 Pub 文件，复制全文 3.设置 Github 项目的 Deploy keys打开 Github，在 Settings 里面找到 Deploy keys： 把复制的Pub文件内容粘贴在“Key”里面；Title可以自己命名（可以和repo配套，就比较好区分）;注意要勾选“Allow write access”，这张截图是一开始没有勾选的时候，后来不知道花了多少时间才找到一直报错的原因 QAQ 或者是在github首页右上角点选小螃蟹图像进入setting页面，在SSH and GPG keys中添加新的SSH Key： 输入密码 to confirm：（第一次配置SSH Key均需输入密码确认） 4.确认SSH Key 有效1$ ssh -T git@github.com 前面的warning都可以不必理会，最后看见一下提示就OK： You’ve successfully authenticated, but Github does not provide shell access. 现在打开 Github 的 Deploy keys 发现原来灰灰的钥匙变成了绿色啦！(第二次搭建博客的时候发现并没有变成绿色，折腾了一会儿决定不理会；进行了别的操作之后回来突然发现亮了！也不知是网络的原因还是啥qaq） 至此，将SSH key部署到Github成功~ 安装 Hexo安装前Hexo可以阅读： Hexo官方：文档 | Hexo大神的一些Tips： hexo博客搭建时遇到的一些问题 安装过程要是出现WARN好像都不要紧的，出现ERR!才是报错~命令运行后出现所安装插件的版本号，代表安装成功！ 第二次搭建博客的时候安装了新版的node，但到这一步想要用npm安装hexo时提示版本不统一；所以安装前先查询node和npm的版本号，然后google一下这两个版本是否匹配，不匹配的解决办法如下：i) 用which npm查询一下位置，第一个是安装Node时指定的安装位置的子文件夹，第二个是C盘中隐藏的缓存文件夹，删除这两个路径文件夹：12rm /d/BLOG/Node/npmrm /c/Users/liurui/AppData/Roaming/npm/node_modules/npm ii) 重新安装Node，选择 “repair”;iii) 测试版本号npm -v，成功啦！ 打开博客文件夹，/d/BLOG/，右击Git Bash Here(接下来的截图中路径应该不太对，重新截图太麻烦啦，所以路径操作以文字为准。） 1.使用 npm 安装 Hexo1$ npm install -g hexo-cli 2.初始化 blog 文件夹1$ hexo init blog 这个命令执行后发现/d/BLOG/会自动新建一个子文件夹blog，之后就是在这里站到站点配置文件_ config和主题配置文件 _ config，安装的各类插件也在这里~ 3.切换到该blog路径1$ cd blog （这个图片是第二次操作所截，路径正确） 4.选做：用淘宝镜像cnpm运行速度会比npm快，只要如下安装好了之后，之后的命令语句中将npm统一写成cnpm就好；有一个命令cnpm是做不到的，还是得用npm，但是我忘记了orz，想用cnpm的朋友们可以百度一下；以下安装我依旧采用npm ~使用cnpm：12$ npm install cnpm -g --registry=http://registry.npm.taobao.org$ cnpm install 5.安装 npm：npm是Hexo的一个扩展插件1$ npm install 那么，如果不小心错在桌面Git bash,导致了在桌面新建了一个blog文件夹来安装npm，接下来一步一步报错… 怎么办 QAQ（以下是万一在安装过程出现类似报错的解决办法） 解决办法：（应该是项目目录下没有package.json这个文件，用npm init -f命令生成）1$ npm init -f 重新再安装一遍就OK： 现在我们来检验一下，Hexo和npm都已安装好：没错，又是查询版本号 QAQ12$ hexo -v$ npm -v 第一部分，Hexo和Github的初始搭建均已完成！第二部分我们来看看如何为博客自定义参数，并将Hexo生成的静态页面部署到Github上~]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>技术贴</tag>
      </tags>
  </entry>
</search>
